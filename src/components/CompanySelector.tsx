import React, { useState, useEffect } from 'react';
import type { Company } from '../types/database';
import { ApiService } from '../services/apiService';
import './CompanySelector.css';

interface CompanySelectorProps {
  onCompanySelected: (company: Company) => void;
  onCompanyCreated: (company: Company) => void;
}

const CompanySelector: React.FC<CompanySelectorProps> = ({
  onCompanySelected,
  onCompanyCreated
}) => {
  const [companies, setCompanies] = useState<Company[]>([]);
  const [loading, setLoading] = useState(true);
  const [showNewCompanyForm, setShowNewCompanyForm] = useState(false);
  const [editingCompany, setEditingCompany] = useState<Company | null>(null);
  const [deletingCompanyId, setDeletingCompanyId] = useState<string | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const [newCompany, setNewCompany] = useState({
    name: '',
    type: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î' as const,
    registrationNumber: '',
    address: '',
    businessDescription: '',
    taxId: '',
    numberOfShares: 1000000,
    shareValue: 1
  });

  const [editForm, setEditForm] = useState({
    name: '',
    type: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î' as '‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î' | '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î',
    registrationNumber: '',
    address: '',
    businessDescription: '',
    taxId: '',
    numberOfShares: 1000000,
    shareValue: 1
  });

  // Load companies on component mount
  useEffect(() => {
    loadCompanies();
  }, []);

  const loadCompanies = async () => {
    try {
      setLoading(true);
      setError(null);
      const result = await ApiService.getCompanies();
      setCompanies(result.companies || []);
    } catch (error) {
      console.error('Failed to load companies:', error);
      setError(error instanceof Error ? error.message : 'Failed to load companies');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateCompany = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsCreating(true);

    try {
      const result = await ApiService.createCompany({
        ...newCompany,
        defaultReportingYear: new Date().getFullYear()
      });
      
      // Clear form
      setNewCompany({
        name: '',
        type: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        registrationNumber: '',
        address: '',
        businessDescription: '',
        taxId: '',
        numberOfShares: 1000000,
        shareValue: 1
      });
      setShowNewCompanyForm(false);
      
      // Reload companies and notify parent
      await loadCompanies();
      onCompanyCreated(result.company);
      
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to create company');
    } finally {
      setIsCreating(false);
    }
  };

  const resetForm = () => {
    setNewCompany({ 
      name: '', 
      type: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î', 
      registrationNumber: '', 
      address: '', 
      businessDescription: '',
      taxId: '',
      numberOfShares: 1000000,
      shareValue: 1
    });
    setShowNewCompanyForm(false);
    setError(null);
  };

  const handleUpdateCompany = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!editingCompany || !editForm.name.trim()) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
      return;
    }

    try {
      setIsUpdating(true);
      setError(null);
      
      const result = await ApiService.updateCompany(editingCompany.id, {
        ...editForm,
        defaultReportingYear: editingCompany.defaultReportingYear
      });
      
      await loadCompanies();
      onCompanySelected(result.company);
      resetEditForm();
    } catch (error) {
      console.error('Failed to update company:', error);
      setError(error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    } finally {
      setIsUpdating(false);
    }
  };

  const startEditCompany = (company: Company) => {
    setEditingCompany(company);
    setEditForm({
      name: company.name,
      type: company.type,
      registrationNumber: company.registrationNumber || '',
      address: company.address || '',
      businessDescription: company.businessDescription || '',
      taxId: company.taxId || '',
      numberOfShares: company.numberOfShares || 1000000,
      shareValue: company.shareValue || 1
    });
    setShowNewCompanyForm(false);
  };

  const resetEditForm = () => {
    setEditingCompany(null);
    setEditForm({
      name: '',
      type: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î' as '‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î' | '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î',
      registrationNumber: '',
      address: '',
      businessDescription: '',
      taxId: '',
      numberOfShares: 1000000,
      shareValue: 1
    });
  };

  const handleDeleteCompany = async (company: Company) => {
    const confirmMessage = `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó "${company.name}"?\n\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`;
    
    if (!window.confirm(confirmMessage)) {
      return;
    }

    try {
      setDeletingCompanyId(company.id);
      setError(null);
      
      await ApiService.deleteCompany(company.id);
      
      // Reload companies list
      await loadCompanies();
      
      // If the deleted company was being edited, close edit form
      if (editingCompany?.id === company.id) {
        resetEditForm();
      }
      
    } catch (error) {
      console.error('Failed to delete company:', error);
      setError(error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    } finally {
      setDeletingCompanyId(null);
    }
  };

  return (
    <div className="company-selector">
      <h2>üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / Select Company</h2>
      
      {error && (
        <div className="error-message">
          {error}
        </div>
      )}
      
      <div className="section">
        <h3>‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà / Existing Companies</h3>
        
        {loading ? (
          <div className="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó...</div>
        ) : companies.length > 0 ? (
          <div className="company-list">
            {companies.map(company => (
              <div
                key={company.id}
                className="company-item"
              >
                <div className="company-info" onClick={() => onCompanySelected(company)}>
                  <h4>{company.name}</h4>
                  <p>{company.type}</p>
                  {company.registrationNumber && (
                    <p>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {company.registrationNumber}</p>
                  )}
                  {company.address && (
                    <p>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {company.address}</p>
                  )}
                  {company.businessDescription && (
                    <p>‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: {company.businessDescription}</p>
                  )}
                </div>
                <div className="company-actions">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      startEditCompany(company);
                    }}
                    className="btn btn-secondary btn-small"
                  >
                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteCompany(company);
                    }}
                    disabled={deletingCompanyId === company.id}
                    className="btn btn-danger btn-small"
                  >
                    {deletingCompanyId === company.id ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...' : 'üóëÔ∏è ‡∏•‡∏ö'}
                  </button>
                </div>
                <div className="company-meta">
                  <p>‡∏õ‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {company.defaultReportingYear}</p>
                  <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(company.createdAt).toLocaleDateString('th-TH')}</p>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="empty-state">
            <h4>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</h4>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
          </div>
        )}
        
        <button
          onClick={() => {
            setShowNewCompanyForm(true);
            setEditingCompany(null);
          }}
          className="btn btn-primary"
          style={{ marginTop: '1rem' }}
        >
          ‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà
        </button>
      </div>

      {/* Edit Company Form */}
      {editingCompany && (
        <div className="section">
          <h3>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / Edit Company Information</h3>
          
          <form onSubmit={handleUpdateCompany} className="edit-company-form">
            <div className="form-group">
              <label htmlFor="edit-company-name">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / Company Name *</label>
              <input
                type="text"
                id="edit-company-name"
                value={editForm.name}
                onChange={e => setEditForm({...editForm, name: e.target.value})}
                disabled={isUpdating}
                required
              />
            </div>
            
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="edit-company-type">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / Company Type *</label>
                <select
                  id="edit-company-type"
                  value={editForm.type}
                  onChange={e => setEditForm({...editForm, type: e.target.value as '‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î' | '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î'})}
                  disabled={isUpdating}
                  required
                >
                  <option value="‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î</option>
                  <option value="‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î">‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î</option>
                </select>
              </div>
              
              <div className="form-group">
                <label htmlFor="edit-registration-number">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / Registration Number</label>
                <input
                  type="text"
                  id="edit-registration-number"
                  value={editForm.registrationNumber}
                  onChange={e => setEditForm({...editForm, registrationNumber: e.target.value})}
                  disabled={isUpdating}
                />
              </div>
            </div>
            
            <div className="form-group">
              <label htmlFor="edit-address">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà / Address</label>
              <textarea
                id="edit-address"
                value={editForm.address}
                onChange={e => setEditForm({...editForm, address: e.target.value})}
                disabled={isUpdating}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 123 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å ‡πÅ‡∏Ç‡∏ß‡∏á‡∏•‡∏≤‡∏î‡∏¢‡∏≤‡∏ß ‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10900"
                rows={2}
              />
              <small className="form-help">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "1.2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á"</small>
            </div>
            
            <div className="form-group">
              <label htmlFor="edit-business-description">‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à / Business Description</label>
              <textarea
                id="edit-business-description"
                value={editForm.businessDescription}
                onChange={e => setEditForm({...editForm, businessDescription: e.target.value})}
                disabled={isUpdating}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≤‡∏¢‡∏™‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡∏õ‡∏•‡∏µ‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£ ‡πÄ‡∏Ñ‡∏°‡∏µ‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏õ‡∏∏‡πã‡∏¢ ‡∏¢‡∏≤‡∏õ‡∏£‡∏≤‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä ‡∏¢‡∏≤‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏û‡∏∑‡∏ä‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î"
                rows={3}
              />
              <small className="form-help">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "1.3 ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô"</small>
            </div>
            
            <div className="form-group">
              <label htmlFor="edit-tax-id">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ / Tax ID</label>
              <input
                type="text"
                id="edit-tax-id"
                value={editForm.taxId}
                onChange={e => setEditForm({...editForm, taxId: e.target.value})}
                disabled={isUpdating}
              />
            </div>
            
            {/* Share information - only for ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î */}
            {editForm.type === '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î' && (
              <>
                <div className="form-group">
                  <label htmlFor="edit-number-of-shares">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏±‡∏ç (‡∏´‡∏∏‡πâ‡∏ô) *</label>
                  <input
                    type="number"
                    id="edit-number-of-shares"
                    value={editForm.numberOfShares}
                    onChange={e => setEditForm({...editForm, numberOfShares: Number(e.target.value) || 1000000})}
                    disabled={isUpdating}
                    min="1"
                    required
                  />
                  <small className="form-help">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</small>
                </div>
                
                <div className="form-group">
                  <label htmlFor="edit-share-value">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏±‡∏ç (‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô) *</label>
                  <input
                    type="number"
                    id="edit-share-value"
                    value={editForm.shareValue}
                    onChange={e => setEditForm({...editForm, shareValue: Number(e.target.value) || 1})}
                    disabled={isUpdating}
                    min="0.01"
                    step="0.01"
                    required
                  />
                  <small className="form-help">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (Par Value) ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</small>
                </div>
              </>
            )}
            
            <div className="form-actions">
              <button
                type="submit"
                disabled={isUpdating || !editForm.name.trim()}
                className="btn btn-success"
              >
                {isUpdating ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó...' : '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}
              </button>
              <button
                type="button"
                onClick={resetEditForm}
                disabled={isUpdating}
                className="btn btn-secondary"
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </form>
        </div>
      )}

      {/* New Company Form */}
      {showNewCompanyForm && (
        <div className="section">
          <h3>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà / Create New Company</h3>
          
          <form onSubmit={handleCreateCompany} className="new-company-form">
            <div className="form-group">
              <label htmlFor="company-name">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / Company Name *</label>
              <input
                type="text"
                id="company-name"
                value={newCompany.name}
                onChange={e => setNewCompany({...newCompany, name: e.target.value})}
                disabled={isCreating}
                required
              />
            </div>
            
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="company-type">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / Company Type *</label>
                <select
                  id="company-type"
                  value={newCompany.type}
                  onChange={e => setNewCompany({...newCompany, type: e.target.value as any})}
                  disabled={isCreating}
                >
                  <option value="‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î</option>
                  <option value="‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î">‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î</option>
                </select>
              </div>
              
              <div className="form-group">
                <label htmlFor="registration-number">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / Registration Number</label>
                <input
                  type="text"
                  id="registration-number"
                  value={newCompany.registrationNumber}
                  onChange={e => setNewCompany({...newCompany, registrationNumber: e.target.value})}
                  disabled={isCreating}
                />
              </div>
            </div>
            
            <div className="form-group">
              <label htmlFor="address">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà / Address</label>
              <input
                type="text"
                id="address"
                value={newCompany.address}
                onChange={e => setNewCompany({...newCompany, address: e.target.value})}
                disabled={isCreating}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 123 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å ‡πÅ‡∏Ç‡∏ß‡∏á‡∏•‡∏≤‡∏î‡∏¢‡∏≤‡∏ß ‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10900"
              />
              <small className="form-help">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "1.2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á"</small>
            </div>
            
            <div className="form-group">
              <label htmlFor="business-description">‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à / Business Description</label>
              <textarea
                id="business-description"
                value={newCompany.businessDescription}
                onChange={e => setNewCompany({...newCompany, businessDescription: e.target.value})}
                disabled={isCreating}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≤‡∏¢‡∏™‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡∏õ‡∏•‡∏µ‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£ ‡πÄ‡∏Ñ‡∏°‡∏µ‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏õ‡∏∏‡πã‡∏¢ ‡∏¢‡∏≤‡∏õ‡∏£‡∏≤‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä ‡∏¢‡∏≤‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏û‡∏∑‡∏ä‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î"
                rows={3}
              />
              <small className="form-help">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "1.3 ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô"</small>
            </div>
            
            <div className="form-group">
              <label htmlFor="tax-id">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ / Tax ID</label>
              <input
                type="text"
                id="tax-id"
                value={newCompany.taxId}
                onChange={e => setNewCompany({...newCompany, taxId: e.target.value})}
                disabled={isCreating}
              />
            </div>
            
            {/* Share information - only for ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î */}
            {newCompany.type === '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≥‡∏Å‡∏±‡∏î' && (
              <>
                <div className="form-group">
                  <label htmlFor="number-of-shares">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏±‡∏ç (‡∏´‡∏∏‡πâ‡∏ô) *</label>
                  <input
                    type="number"
                    id="number-of-shares"
                    value={newCompany.numberOfShares}
                    onChange={e => setNewCompany({...newCompany, numberOfShares: Number(e.target.value) || 1000000})}
                    disabled={isCreating}
                    min="1"
                    required
                  />
                  <small className="form-help">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</small>
                </div>
                
                <div className="form-group">
                  <label htmlFor="share-value">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏±‡∏ç (‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô) *</label>
                  <input
                    type="number"
                    id="share-value"
                    value={newCompany.shareValue}
                    onChange={e => setNewCompany({...newCompany, shareValue: Number(e.target.value) || 1})}
                    disabled={isCreating}
                    min="0.01"
                    step="0.01"
                    required
                  />
                  <small className="form-help">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (Par Value) ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</small>
                </div>
              </>
            )}
            
            <div className="form-actions">
              <button
                type="submit"
                disabled={isCreating || !newCompany.name.trim()}
                className="btn btn-success"
              >
                {isCreating ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...' : '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó'}
              </button>
              <button
                type="button"
                onClick={resetForm}
                disabled={isCreating}
                className="btn btn-secondary"
              >
                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
};

export default CompanySelector;
